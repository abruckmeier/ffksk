"""
Django settings for ffeKiosk project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import logging


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LOGS_DIR = os.path.join(BASE_DIR, 'logs')


# Besorgen der sensitiven Einstellungen von security_settings.py
try:
    from .security_settings import *
except:
    raise Exception("No security_settings.py found")


# Angabe, welche Datenbasis verwendet wird (fuer 'queries.py')
DB_IN_USE = 'SQLite' #'SQLite'

ACTIVATE_SLACK_INTERACTION = True
SLACK_SETTINGS = {
    'channelToPost': '#kiosk_bot',
    'inventoryChannelName': 'kiosk',
    'MaxBankBalance': 3000, # Cent
    'MinBankBalance': 100, # Cent
}


# Application definition

INSTALLED_APPS = [
    'widget_tweaks',
    'jchart',
    'django.contrib.humanize',
    'paypal.apps.PaypalConfig',
    'kiosk.apps.KioskConfig',
    'profil.apps.ProfilConfig',
    'ffeKiosk',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ffeKiosk.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ffeKiosk.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'profil.KioskUser'

LOGIN_REDIRECT_URL = '/accounts/registrationStatus/'

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'de'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DECIMAL_SEPARATOR = ','
THOUSAND_SEPARATOR = ' '


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    #os.path.join(BASE_DIR, "static"),
    #'/var/www/static/',
] # python manage.py collectstatic


# Finanzielle Konstanten -> spaeter in den KioskBot geben
FINANZ = {
    'minProduktMarge': 0.00, # vom VK-Preis
    'gewinnEK': 0.5, # Wird beim Einpflegen vom Verwalter gutgeschrieben
    'gewinnVW': 0.1, # Wird bei Produktverkauf gutgeschrieben
    'gewinnBank': 0.3, # Bleibt als Ueberschuss in der Kasse, wird nicht bewegt.
    'gewinnAdmin':0.1, # Wird bei Produktverkauf gutgeschrieben
    'monUmverteilungAlle': 0.5, # anteilig der User am pers. Umsatz
    'monUmverteilungAdmin': 0.5,
    'monNegUmverteilungAdmin': 1,
}

VIEWS = {
    'itemsInKontobewegungen': 10,
}

# Logging


class CustomFormatter(logging.Formatter):
    def format(self, record):
        s = super().format(record)
        if '\n' in s:
            s = s.replace('\n', '\n........')
        return s


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            '()': CustomFormatter,
            'format': '{levelname} | {asctime} | {module} | {message}',
            'datefmt': '%Y-%m-%d %H:%M:%S',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'django_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'django.log'),
            'formatter': 'verbose',
            'encoding': 'utf8',
        },
        'paypal_mail_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'paypal_mail.log'),
            'formatter': 'verbose',
            'encoding': 'utf8',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'django_file'],
            'level': 'WARNING',
        },
        'paypal.paypal_mail': {
            'handlers': ['console', 'paypal_mail_file'],
            'level': 'INFO',
        },
    },
}

